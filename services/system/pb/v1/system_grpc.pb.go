// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: system.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemServiceClient is the client API for SystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemServiceClient interface {
	QueryRoleDetail(ctx context.Context, in *QueryRoleDetailReq, opts ...grpc.CallOption) (*QueryRoleDetailResp, error)
	QueryRoleList(ctx context.Context, in *QueryRoleListReq, opts ...grpc.CallOption) (*QueryRoleListResp, error)
	QueryRolePage(ctx context.Context, in *QueryRolePageReq, opts ...grpc.CallOption) (*QueryRolePageResp, error)
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CommonIdDataResp, error)
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*CommonResp, error)
	QueryUserDetail(ctx context.Context, in *QueryUserDetailReq, opts ...grpc.CallOption) (*QueryUserDetailResp, error)
	QueryUserList(ctx context.Context, in *QueryUserListReq, opts ...grpc.CallOption) (*QueryUserListResp, error)
	QueryUserPage(ctx context.Context, in *QueryUserPageReq, opts ...grpc.CallOption) (*QueryUserPageResp, error)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CommonIdDataResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*CommonResp, error)
	QueryAdminDetail(ctx context.Context, in *QueryAdminDetailReq, opts ...grpc.CallOption) (*QueryAdminDetailResp, error)
	QueryAdminList(ctx context.Context, in *QueryAdminListReq, opts ...grpc.CallOption) (*QueryAdminListResp, error)
	QueryAdminPage(ctx context.Context, in *QueryAdminPageReq, opts ...grpc.CallOption) (*QueryAdminPageResp, error)
	CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...grpc.CallOption) (*CommonIdDataResp, error)
	UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*CommonResp, error)
	QuerySysadminDetail(ctx context.Context, in *QuerySysadminDetailReq, opts ...grpc.CallOption) (*QuerySysadminDetailResp, error)
	QuerySysadminList(ctx context.Context, in *QuerySysadminListReq, opts ...grpc.CallOption) (*QuerySysadminListResp, error)
	QuerySysadminPage(ctx context.Context, in *QuerySysadminPageReq, opts ...grpc.CallOption) (*QuerySysadminPageResp, error)
	CreateSysadmin(ctx context.Context, in *CreateSysadminReq, opts ...grpc.CallOption) (*CommonIdDataResp, error)
	UpdateSysadmin(ctx context.Context, in *UpdateSysadminReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSysadmin(ctx context.Context, in *DeleteSysadminReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetAuthToken(ctx context.Context, in *GetAuthTokenReq, opts ...grpc.CallOption) (*GetAuthTokenResp, error)
	QueryWebElemDetail(ctx context.Context, in *QueryWebElemDetailReq, opts ...grpc.CallOption) (*QueryWebElemDetailResp, error)
	QueryWebElemList(ctx context.Context, in *QueryWebElemListReq, opts ...grpc.CallOption) (*QueryWebElemListResp, error)
	QueryWebElemPage(ctx context.Context, in *QueryWebElemPageReq, opts ...grpc.CallOption) (*QueryWebElemPageResp, error)
	CreateWebElem(ctx context.Context, in *CreateWebElemReq, opts ...grpc.CallOption) (*CommonIdDataResp, error)
	UpdateWebElem(ctx context.Context, in *UpdateWebElemReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteWebElem(ctx context.Context, in *DeleteWebElemReq, opts ...grpc.CallOption) (*CommonResp, error)
	QueryWebApiDetail(ctx context.Context, in *QueryWebApiDetailReq, opts ...grpc.CallOption) (*QueryWebApiDetailResp, error)
	QueryWebApiList(ctx context.Context, in *QueryWebApiListReq, opts ...grpc.CallOption) (*QueryWebApiListResp, error)
	QueryWebApiPage(ctx context.Context, in *QueryWebApiPageReq, opts ...grpc.CallOption) (*QueryWebApiPageResp, error)
	CreateWebApi(ctx context.Context, in *CreateWebApiReq, opts ...grpc.CallOption) (*CommonIdDataResp, error)
	UpdateWebApi(ctx context.Context, in *UpdateWebApiReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteWebApi(ctx context.Context, in *DeleteWebApiReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type systemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemServiceClient(cc grpc.ClientConnInterface) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) QueryRoleDetail(ctx context.Context, in *QueryRoleDetailReq, opts ...grpc.CallOption) (*QueryRoleDetailResp, error) {
	out := new(QueryRoleDetailResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryRoleDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryRoleList(ctx context.Context, in *QueryRoleListReq, opts ...grpc.CallOption) (*QueryRoleListResp, error) {
	out := new(QueryRoleListResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryRolePage(ctx context.Context, in *QueryRolePageReq, opts ...grpc.CallOption) (*QueryRolePageResp, error) {
	out := new(QueryRolePageResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryRolePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CommonIdDataResp, error) {
	out := new(CommonIdDataResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryUserDetail(ctx context.Context, in *QueryUserDetailReq, opts ...grpc.CallOption) (*QueryUserDetailResp, error) {
	out := new(QueryUserDetailResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryUserDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryUserList(ctx context.Context, in *QueryUserListReq, opts ...grpc.CallOption) (*QueryUserListResp, error) {
	out := new(QueryUserListResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryUserPage(ctx context.Context, in *QueryUserPageReq, opts ...grpc.CallOption) (*QueryUserPageResp, error) {
	out := new(QueryUserPageResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryUserPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CommonIdDataResp, error) {
	out := new(CommonIdDataResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryAdminDetail(ctx context.Context, in *QueryAdminDetailReq, opts ...grpc.CallOption) (*QueryAdminDetailResp, error) {
	out := new(QueryAdminDetailResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryAdminDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryAdminList(ctx context.Context, in *QueryAdminListReq, opts ...grpc.CallOption) (*QueryAdminListResp, error) {
	out := new(QueryAdminListResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryAdminList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryAdminPage(ctx context.Context, in *QueryAdminPageReq, opts ...grpc.CallOption) (*QueryAdminPageResp, error) {
	out := new(QueryAdminPageResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryAdminPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...grpc.CallOption) (*CommonIdDataResp, error) {
	out := new(CommonIdDataResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/CreateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/UpdateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/DeleteAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QuerySysadminDetail(ctx context.Context, in *QuerySysadminDetailReq, opts ...grpc.CallOption) (*QuerySysadminDetailResp, error) {
	out := new(QuerySysadminDetailResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QuerySysadminDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QuerySysadminList(ctx context.Context, in *QuerySysadminListReq, opts ...grpc.CallOption) (*QuerySysadminListResp, error) {
	out := new(QuerySysadminListResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QuerySysadminList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QuerySysadminPage(ctx context.Context, in *QuerySysadminPageReq, opts ...grpc.CallOption) (*QuerySysadminPageResp, error) {
	out := new(QuerySysadminPageResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QuerySysadminPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) CreateSysadmin(ctx context.Context, in *CreateSysadminReq, opts ...grpc.CallOption) (*CommonIdDataResp, error) {
	out := new(CommonIdDataResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/CreateSysadmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateSysadmin(ctx context.Context, in *UpdateSysadminReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/UpdateSysadmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteSysadmin(ctx context.Context, in *DeleteSysadminReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/DeleteSysadmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetAuthToken(ctx context.Context, in *GetAuthTokenReq, opts ...grpc.CallOption) (*GetAuthTokenResp, error) {
	out := new(GetAuthTokenResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/GetAuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryWebElemDetail(ctx context.Context, in *QueryWebElemDetailReq, opts ...grpc.CallOption) (*QueryWebElemDetailResp, error) {
	out := new(QueryWebElemDetailResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryWebElemDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryWebElemList(ctx context.Context, in *QueryWebElemListReq, opts ...grpc.CallOption) (*QueryWebElemListResp, error) {
	out := new(QueryWebElemListResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryWebElemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryWebElemPage(ctx context.Context, in *QueryWebElemPageReq, opts ...grpc.CallOption) (*QueryWebElemPageResp, error) {
	out := new(QueryWebElemPageResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryWebElemPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) CreateWebElem(ctx context.Context, in *CreateWebElemReq, opts ...grpc.CallOption) (*CommonIdDataResp, error) {
	out := new(CommonIdDataResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/CreateWebElem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateWebElem(ctx context.Context, in *UpdateWebElemReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/UpdateWebElem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteWebElem(ctx context.Context, in *DeleteWebElemReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/DeleteWebElem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryWebApiDetail(ctx context.Context, in *QueryWebApiDetailReq, opts ...grpc.CallOption) (*QueryWebApiDetailResp, error) {
	out := new(QueryWebApiDetailResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryWebApiDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryWebApiList(ctx context.Context, in *QueryWebApiListReq, opts ...grpc.CallOption) (*QueryWebApiListResp, error) {
	out := new(QueryWebApiListResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryWebApiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryWebApiPage(ctx context.Context, in *QueryWebApiPageReq, opts ...grpc.CallOption) (*QueryWebApiPageResp, error) {
	out := new(QueryWebApiPageResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/QueryWebApiPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) CreateWebApi(ctx context.Context, in *CreateWebApiReq, opts ...grpc.CallOption) (*CommonIdDataResp, error) {
	out := new(CommonIdDataResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/CreateWebApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateWebApi(ctx context.Context, in *UpdateWebApiReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/UpdateWebApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteWebApi(ctx context.Context, in *DeleteWebApiReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/system.v1.systemService/DeleteWebApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServiceServer is the server API for SystemService service.
// All implementations must embed UnimplementedSystemServiceServer
// for forward compatibility
type SystemServiceServer interface {
	QueryRoleDetail(context.Context, *QueryRoleDetailReq) (*QueryRoleDetailResp, error)
	QueryRoleList(context.Context, *QueryRoleListReq) (*QueryRoleListResp, error)
	QueryRolePage(context.Context, *QueryRolePageReq) (*QueryRolePageResp, error)
	CreateRole(context.Context, *CreateRoleReq) (*CommonIdDataResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*CommonResp, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*CommonResp, error)
	QueryUserDetail(context.Context, *QueryUserDetailReq) (*QueryUserDetailResp, error)
	QueryUserList(context.Context, *QueryUserListReq) (*QueryUserListResp, error)
	QueryUserPage(context.Context, *QueryUserPageReq) (*QueryUserPageResp, error)
	CreateUser(context.Context, *CreateUserReq) (*CommonIdDataResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*CommonResp, error)
	DeleteUser(context.Context, *DeleteUserReq) (*CommonResp, error)
	QueryAdminDetail(context.Context, *QueryAdminDetailReq) (*QueryAdminDetailResp, error)
	QueryAdminList(context.Context, *QueryAdminListReq) (*QueryAdminListResp, error)
	QueryAdminPage(context.Context, *QueryAdminPageReq) (*QueryAdminPageResp, error)
	CreateAdmin(context.Context, *CreateAdminReq) (*CommonIdDataResp, error)
	UpdateAdmin(context.Context, *UpdateAdminReq) (*CommonResp, error)
	DeleteAdmin(context.Context, *DeleteAdminReq) (*CommonResp, error)
	QuerySysadminDetail(context.Context, *QuerySysadminDetailReq) (*QuerySysadminDetailResp, error)
	QuerySysadminList(context.Context, *QuerySysadminListReq) (*QuerySysadminListResp, error)
	QuerySysadminPage(context.Context, *QuerySysadminPageReq) (*QuerySysadminPageResp, error)
	CreateSysadmin(context.Context, *CreateSysadminReq) (*CommonIdDataResp, error)
	UpdateSysadmin(context.Context, *UpdateSysadminReq) (*CommonResp, error)
	DeleteSysadmin(context.Context, *DeleteSysadminReq) (*CommonResp, error)
	GetAuthToken(context.Context, *GetAuthTokenReq) (*GetAuthTokenResp, error)
	QueryWebElemDetail(context.Context, *QueryWebElemDetailReq) (*QueryWebElemDetailResp, error)
	QueryWebElemList(context.Context, *QueryWebElemListReq) (*QueryWebElemListResp, error)
	QueryWebElemPage(context.Context, *QueryWebElemPageReq) (*QueryWebElemPageResp, error)
	CreateWebElem(context.Context, *CreateWebElemReq) (*CommonIdDataResp, error)
	UpdateWebElem(context.Context, *UpdateWebElemReq) (*CommonResp, error)
	DeleteWebElem(context.Context, *DeleteWebElemReq) (*CommonResp, error)
	QueryWebApiDetail(context.Context, *QueryWebApiDetailReq) (*QueryWebApiDetailResp, error)
	QueryWebApiList(context.Context, *QueryWebApiListReq) (*QueryWebApiListResp, error)
	QueryWebApiPage(context.Context, *QueryWebApiPageReq) (*QueryWebApiPageResp, error)
	CreateWebApi(context.Context, *CreateWebApiReq) (*CommonIdDataResp, error)
	UpdateWebApi(context.Context, *UpdateWebApiReq) (*CommonResp, error)
	DeleteWebApi(context.Context, *DeleteWebApiReq) (*CommonResp, error)
	mustEmbedUnimplementedSystemServiceServer()
}

// UnimplementedSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServiceServer struct {
}

func (UnimplementedSystemServiceServer) QueryRoleDetail(context.Context, *QueryRoleDetailReq) (*QueryRoleDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoleDetail not implemented")
}
func (UnimplementedSystemServiceServer) QueryRoleList(context.Context, *QueryRoleListReq) (*QueryRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoleList not implemented")
}
func (UnimplementedSystemServiceServer) QueryRolePage(context.Context, *QueryRolePageReq) (*QueryRolePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRolePage not implemented")
}
func (UnimplementedSystemServiceServer) CreateRole(context.Context, *CreateRoleReq) (*CommonIdDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedSystemServiceServer) UpdateRole(context.Context, *UpdateRoleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedSystemServiceServer) DeleteRole(context.Context, *DeleteRoleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedSystemServiceServer) QueryUserDetail(context.Context, *QueryUserDetailReq) (*QueryUserDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserDetail not implemented")
}
func (UnimplementedSystemServiceServer) QueryUserList(context.Context, *QueryUserListReq) (*QueryUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserList not implemented")
}
func (UnimplementedSystemServiceServer) QueryUserPage(context.Context, *QueryUserPageReq) (*QueryUserPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserPage not implemented")
}
func (UnimplementedSystemServiceServer) CreateUser(context.Context, *CreateUserReq) (*CommonIdDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSystemServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSystemServiceServer) DeleteUser(context.Context, *DeleteUserReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedSystemServiceServer) QueryAdminDetail(context.Context, *QueryAdminDetailReq) (*QueryAdminDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAdminDetail not implemented")
}
func (UnimplementedSystemServiceServer) QueryAdminList(context.Context, *QueryAdminListReq) (*QueryAdminListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAdminList not implemented")
}
func (UnimplementedSystemServiceServer) QueryAdminPage(context.Context, *QueryAdminPageReq) (*QueryAdminPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAdminPage not implemented")
}
func (UnimplementedSystemServiceServer) CreateAdmin(context.Context, *CreateAdminReq) (*CommonIdDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmin not implemented")
}
func (UnimplementedSystemServiceServer) UpdateAdmin(context.Context, *UpdateAdminReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmin not implemented")
}
func (UnimplementedSystemServiceServer) DeleteAdmin(context.Context, *DeleteAdminReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (UnimplementedSystemServiceServer) QuerySysadminDetail(context.Context, *QuerySysadminDetailReq) (*QuerySysadminDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySysadminDetail not implemented")
}
func (UnimplementedSystemServiceServer) QuerySysadminList(context.Context, *QuerySysadminListReq) (*QuerySysadminListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySysadminList not implemented")
}
func (UnimplementedSystemServiceServer) QuerySysadminPage(context.Context, *QuerySysadminPageReq) (*QuerySysadminPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySysadminPage not implemented")
}
func (UnimplementedSystemServiceServer) CreateSysadmin(context.Context, *CreateSysadminReq) (*CommonIdDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysadmin not implemented")
}
func (UnimplementedSystemServiceServer) UpdateSysadmin(context.Context, *UpdateSysadminReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysadmin not implemented")
}
func (UnimplementedSystemServiceServer) DeleteSysadmin(context.Context, *DeleteSysadminReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysadmin not implemented")
}
func (UnimplementedSystemServiceServer) GetAuthToken(context.Context, *GetAuthTokenReq) (*GetAuthTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthToken not implemented")
}
func (UnimplementedSystemServiceServer) QueryWebElemDetail(context.Context, *QueryWebElemDetailReq) (*QueryWebElemDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWebElemDetail not implemented")
}
func (UnimplementedSystemServiceServer) QueryWebElemList(context.Context, *QueryWebElemListReq) (*QueryWebElemListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWebElemList not implemented")
}
func (UnimplementedSystemServiceServer) QueryWebElemPage(context.Context, *QueryWebElemPageReq) (*QueryWebElemPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWebElemPage not implemented")
}
func (UnimplementedSystemServiceServer) CreateWebElem(context.Context, *CreateWebElemReq) (*CommonIdDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebElem not implemented")
}
func (UnimplementedSystemServiceServer) UpdateWebElem(context.Context, *UpdateWebElemReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebElem not implemented")
}
func (UnimplementedSystemServiceServer) DeleteWebElem(context.Context, *DeleteWebElemReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebElem not implemented")
}
func (UnimplementedSystemServiceServer) QueryWebApiDetail(context.Context, *QueryWebApiDetailReq) (*QueryWebApiDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWebApiDetail not implemented")
}
func (UnimplementedSystemServiceServer) QueryWebApiList(context.Context, *QueryWebApiListReq) (*QueryWebApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWebApiList not implemented")
}
func (UnimplementedSystemServiceServer) QueryWebApiPage(context.Context, *QueryWebApiPageReq) (*QueryWebApiPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWebApiPage not implemented")
}
func (UnimplementedSystemServiceServer) CreateWebApi(context.Context, *CreateWebApiReq) (*CommonIdDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebApi not implemented")
}
func (UnimplementedSystemServiceServer) UpdateWebApi(context.Context, *UpdateWebApiReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebApi not implemented")
}
func (UnimplementedSystemServiceServer) DeleteWebApi(context.Context, *DeleteWebApiReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebApi not implemented")
}
func (UnimplementedSystemServiceServer) mustEmbedUnimplementedSystemServiceServer() {}

// UnsafeSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServiceServer will
// result in compilation errors.
type UnsafeSystemServiceServer interface {
	mustEmbedUnimplementedSystemServiceServer()
}

func RegisterSystemServiceServer(s grpc.ServiceRegistrar, srv SystemServiceServer) {
	s.RegisterService(&SystemService_ServiceDesc, srv)
}

func _SystemService_QueryRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoleDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryRoleDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryRoleDetail(ctx, req.(*QueryRoleDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryRoleList(ctx, req.(*QueryRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryRolePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRolePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryRolePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryRolePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryRolePage(ctx, req.(*QueryRolePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryUserDetail(ctx, req.(*QueryUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryUserList(ctx, req.(*QueryUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryUserPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryUserPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryUserPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryUserPage(ctx, req.(*QueryUserPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryAdminDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdminDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryAdminDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryAdminDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryAdminDetail(ctx, req.(*QueryAdminDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdminListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryAdminList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryAdminList(ctx, req.(*QueryAdminListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryAdminPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdminPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryAdminPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryAdminPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryAdminPage(ctx, req.(*QueryAdminPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/CreateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CreateAdmin(ctx, req.(*CreateAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/UpdateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateAdmin(ctx, req.(*UpdateAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/DeleteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteAdmin(ctx, req.(*DeleteAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QuerySysadminDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySysadminDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QuerySysadminDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QuerySysadminDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QuerySysadminDetail(ctx, req.(*QuerySysadminDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QuerySysadminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySysadminListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QuerySysadminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QuerySysadminList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QuerySysadminList(ctx, req.(*QuerySysadminListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QuerySysadminPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySysadminPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QuerySysadminPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QuerySysadminPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QuerySysadminPage(ctx, req.(*QuerySysadminPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_CreateSysadmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSysadminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CreateSysadmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/CreateSysadmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CreateSysadmin(ctx, req.(*CreateSysadminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateSysadmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysadminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateSysadmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/UpdateSysadmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateSysadmin(ctx, req.(*UpdateSysadminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteSysadmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSysadminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteSysadmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/DeleteSysadmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteSysadmin(ctx, req.(*DeleteSysadminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/GetAuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetAuthToken(ctx, req.(*GetAuthTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryWebElemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWebElemDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryWebElemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryWebElemDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryWebElemDetail(ctx, req.(*QueryWebElemDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryWebElemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWebElemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryWebElemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryWebElemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryWebElemList(ctx, req.(*QueryWebElemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryWebElemPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWebElemPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryWebElemPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryWebElemPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryWebElemPage(ctx, req.(*QueryWebElemPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_CreateWebElem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebElemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CreateWebElem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/CreateWebElem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CreateWebElem(ctx, req.(*CreateWebElemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateWebElem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebElemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateWebElem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/UpdateWebElem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateWebElem(ctx, req.(*UpdateWebElemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteWebElem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebElemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteWebElem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/DeleteWebElem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteWebElem(ctx, req.(*DeleteWebElemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryWebApiDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWebApiDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryWebApiDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryWebApiDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryWebApiDetail(ctx, req.(*QueryWebApiDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryWebApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWebApiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryWebApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryWebApiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryWebApiList(ctx, req.(*QueryWebApiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryWebApiPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWebApiPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryWebApiPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/QueryWebApiPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryWebApiPage(ctx, req.(*QueryWebApiPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_CreateWebApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CreateWebApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/CreateWebApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CreateWebApi(ctx, req.(*CreateWebApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateWebApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateWebApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/UpdateWebApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateWebApi(ctx, req.(*UpdateWebApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteWebApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteWebApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.v1.systemService/DeleteWebApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteWebApi(ctx, req.(*DeleteWebApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemService_ServiceDesc is the grpc.ServiceDesc for SystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "system.v1.systemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryRoleDetail",
			Handler:    _SystemService_QueryRoleDetail_Handler,
		},
		{
			MethodName: "QueryRoleList",
			Handler:    _SystemService_QueryRoleList_Handler,
		},
		{
			MethodName: "QueryRolePage",
			Handler:    _SystemService_QueryRolePage_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _SystemService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _SystemService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _SystemService_DeleteRole_Handler,
		},
		{
			MethodName: "QueryUserDetail",
			Handler:    _SystemService_QueryUserDetail_Handler,
		},
		{
			MethodName: "QueryUserList",
			Handler:    _SystemService_QueryUserList_Handler,
		},
		{
			MethodName: "QueryUserPage",
			Handler:    _SystemService_QueryUserPage_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _SystemService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SystemService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _SystemService_DeleteUser_Handler,
		},
		{
			MethodName: "QueryAdminDetail",
			Handler:    _SystemService_QueryAdminDetail_Handler,
		},
		{
			MethodName: "QueryAdminList",
			Handler:    _SystemService_QueryAdminList_Handler,
		},
		{
			MethodName: "QueryAdminPage",
			Handler:    _SystemService_QueryAdminPage_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _SystemService_CreateAdmin_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _SystemService_UpdateAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _SystemService_DeleteAdmin_Handler,
		},
		{
			MethodName: "QuerySysadminDetail",
			Handler:    _SystemService_QuerySysadminDetail_Handler,
		},
		{
			MethodName: "QuerySysadminList",
			Handler:    _SystemService_QuerySysadminList_Handler,
		},
		{
			MethodName: "QuerySysadminPage",
			Handler:    _SystemService_QuerySysadminPage_Handler,
		},
		{
			MethodName: "CreateSysadmin",
			Handler:    _SystemService_CreateSysadmin_Handler,
		},
		{
			MethodName: "UpdateSysadmin",
			Handler:    _SystemService_UpdateSysadmin_Handler,
		},
		{
			MethodName: "DeleteSysadmin",
			Handler:    _SystemService_DeleteSysadmin_Handler,
		},
		{
			MethodName: "GetAuthToken",
			Handler:    _SystemService_GetAuthToken_Handler,
		},
		{
			MethodName: "QueryWebElemDetail",
			Handler:    _SystemService_QueryWebElemDetail_Handler,
		},
		{
			MethodName: "QueryWebElemList",
			Handler:    _SystemService_QueryWebElemList_Handler,
		},
		{
			MethodName: "QueryWebElemPage",
			Handler:    _SystemService_QueryWebElemPage_Handler,
		},
		{
			MethodName: "CreateWebElem",
			Handler:    _SystemService_CreateWebElem_Handler,
		},
		{
			MethodName: "UpdateWebElem",
			Handler:    _SystemService_UpdateWebElem_Handler,
		},
		{
			MethodName: "DeleteWebElem",
			Handler:    _SystemService_DeleteWebElem_Handler,
		},
		{
			MethodName: "QueryWebApiDetail",
			Handler:    _SystemService_QueryWebApiDetail_Handler,
		},
		{
			MethodName: "QueryWebApiList",
			Handler:    _SystemService_QueryWebApiList_Handler,
		},
		{
			MethodName: "QueryWebApiPage",
			Handler:    _SystemService_QueryWebApiPage_Handler,
		},
		{
			MethodName: "CreateWebApi",
			Handler:    _SystemService_CreateWebApi_Handler,
		},
		{
			MethodName: "UpdateWebApi",
			Handler:    _SystemService_UpdateWebApi_Handler,
		},
		{
			MethodName: "DeleteWebApi",
			Handler:    _SystemService_DeleteWebApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}
